[%	emitProgram(ProbLogProgram.all->first()); 

operation emitProgram(a : ProbLogProgram){
	for(s in a.statements){
		emitStatement(s);
	}
}

//
// ProbLog Statements (uses dynamic typing)
//
operation emitStatement(r : Rule){
	emitLHS(r.lhs);
	if(r.rhs <> null){
		%] :- [%
		emitRHS(r.rhs);
	}
	%].
[%}

operation emitStatement(ev : Evidence){
	%]evidence([%=emitPart(ev.subject)%][%
	if(ev.value <> null){
		%], [%=ev.value%][%
	}
	%]).
[%}

operation emitStatement(c : Comment){
	var strValue = "";
	if(c.text<>null){
		strValue = c.text;
	}
	%]% [%=strValue%]
[%}

operation emitStatement(il : ImportLibrary){
	%]:- use_module(library([%=il.name%])).
[%}

//TODO remove debug statements from model
operation emitStatement(c : Cheat){
	var strValue = "";
	if(c.contents<>null){
		strValue = c.contents;
		%][%=strValue%] % cheat!	
	[%}	
}

operation emitStatement(q : Query){
	%]query([%=emitPart(q.subject)%]).
[%}

//
// Rule parts
//
operation emitLHS(lhs : LHS){
	var adj = lhs.propositions;
	%][%=adj->collect(a | emitProposition(a)).joinToString("; ")%][%
}

operation emitRHS(rhs : RHS){
	%][%=rhs.conjunction->collect(p| emitPart(p)).joinToString(", ")%][%
}

//Use dynamic overloading to differentiate between annotated and non-annotated elements
@template
operation emitProposition(a : Annotatable){
	%][%=emitPart(a)%][%
}

@template
operation emitProposition(a : AnnotatedReferable){
	%][%=emitAnnotatedReferable(a)%][%
}

@template
operation emitAnnotatedReferable(ad : AnnotatedReferable){
	// Emit probability annotation if present
	if(not (ad.probabilitymeasure == null)){
		%][%=emitProbabilityMeasure(ad.probabilitymeasure)%]::[%
	}
	%][%=emitPart(ad.annotates)%][%
}

//
// Probability measures
//
@template
operation emitProbabilityMeasure(pb : ProbabilityLiteral){
	%][%=pb.value%][%
}

@template
operation emitProbabilityMeasure(pb : ProbabilityFraction){
	%][%=pb.nominator%][%='/'%][%=pb.denominator%][%
}

//
// Prolog parts (uses dynamic overloading for correct method)
//

@template
operation emitPart(ti : TermInstance){
	%][%=emitPart(ti.template)
	%]([%=ti.arguments->collect(p|emitPart(p)).joinToString(", ")%])[%
}

@template
operation emitPart(term : Term){
	%][%=term.name.firstToLowerCase()%][%
}

@template
operation emitPart(variable : Variable){
	%][%=variable.name.firstToUpperCase()%][%
}

@template
operation emitPart(atom : Atom){
	%][%=atom.name.firstToLowerCase()%][%
}

@template
operation emitPart(term : PLList){
	%][[%=term.contents->collect(p|emitPart(p)).joinToString(", ")%]][%
}

@template
operation emitPart(term : PLTuple){
	%]([%=term.contents->collect(p|emitPart(p)).joinToString(", ")%])[%
}

operation List<Any> joinToString(delimiter: String) : String {
	var utils = new Native("org.eclipse.epsilon.common.util.CollectionUtil");
	return utils.join(self,delimiter);
}
%]