package nl.utwente.fmt.ieaatparser

import nl.utwente.fmt.ieaatparser.eom.exportPVAI
import nl.utwente.fmt.ieaatparser.io.dissectIEAAT
import nl.utwente.fmt.ieaatparser.prm.exportPVA
import org.apache.commons.cli.*
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import pva.PVAContainer
import pva.PVAPackage
import pvai.PVAIPackage
import java.io.File


fun main(args: Array<String>) {
    val opts = setupCommandLineArguments()
    ensureEMFPackagesLoaded()

    try {
        val cmd = checkCommandLineValidity(args, opts)
        //Attempt to find the input file
        val source = File(cmd.argList.firstOrNull() ?: throw IllegalArgumentException("No input file specified!"))

        //Get filenames for output files in advance
        val pvaOut = File("${source.nameWithoutExtension}.pva")
        val pvaiOut = File("${source.nameWithoutExtension}.pvai")

        source.dissectIEAAT { parts ->
            //Parse and store result if pva should be saved
            val parsedPRM: PVAContainer? = cmd.hasOption("pva") invokeIfTrue {
                exportPVA(parts, pvaOut, cmd.hasOption("f"))
            }
            if (cmd.hasOption("pvai")) {
                exportPVAI(parts, parsedPRM, pvaiOut, pvaOut)
            }
        }
    }catch(e : ParseException){
        println("Error parsing command-line arguments (${e.message}).")
        HelpFormatter().printHelp("PRMParser <source>",opts,true)
    }
}

/**
 * Invokes the static { } initialization code blocks of the EMF packages when they haven't been invoked yet
 */
private fun ensureEMFPackagesLoaded() {
    PVAPackage.eINSTANCE.eClass()
    PVAIPackage.eINSTANCE.eClass()
    Resource.Factory.Registry.INSTANCE.extensionToFactoryMap.apply {
        put("pva", XMIResourceFactoryImpl())
        put("pvai", XMIResourceFactoryImpl())
    }
}

/**
 * Validates the provided command line options
 */
private fun checkCommandLineValidity(args: Array<String>, opts: Options): CommandLine {
    val cmd = DefaultParser().parse(opts, args, false)

    // explicitly verify args
    if (cmd.args.size < 1) {
        throw MissingArgumentException("Not enough arguments")
    }
    if (!cmd.hasOption("pva") && !cmd.hasOption("pvai")) {
        throw MissingArgumentException("At least one argument of [-pva | -pvai] required")
    }
    return cmd
}

/**
 * Setup the command line parameters
 */
private fun setupCommandLineArguments(): Options = Options().apply {
    addOption(
            Option.builder("pva").
                    numberOfArgs(0).
                    desc("Whether to generate a PVA file").
                    required(false).build()
    )
    addOption(
            Option.builder("pvai").
                    numberOfArgs(0).
                    desc("Whether to generate a PVAI file").
                    required(false).
                    build()
    )
    addOption(
            Option.builder("f").
                    numberOfArgs(0).
                    desc("Whether to force overwriting files").
                    required(false).
                    build()
    )
}