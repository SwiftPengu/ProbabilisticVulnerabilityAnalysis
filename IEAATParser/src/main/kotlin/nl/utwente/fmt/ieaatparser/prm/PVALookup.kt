package nl.utwente.fmt.ieaatparser.prm

import pva.*

/**
 * Find a Template class in a prmmodel
 */
inline internal fun <reified T: TemplateType> lookupTemplate(lookupName: String, pvaModel: PVAContainer, errorMessage: (() -> (String))) : T =
        pvaModel.templateTypes
                .filterIsInstance<T>()
                .find { it.name == lookupName }
                ?: throw RuntimeException(errorMessage.invoke())


inline internal fun <reified T: TemplateType> lookupTemplate(lookupName: String, pvaModel: PVAContainer) : T =
        lookupTemplate(lookupName, pvaModel,{"Lookup failed $lookupName"})

/**
 * Find a Concrete class in a prmmodel
 */
inline internal fun <reified T: ConcreteType> lookupConcrete(lookupName: String, pvaModel: PVAContainer, errorMessage: (() -> (String))): T =
        pvaModel.concreteTypes
                .filterIsInstance<T>()
                .find { it.name == lookupName }
                ?: throw RuntimeException(errorMessage.invoke())

inline internal fun <reified T: ConcreteType> lookupConcrete(lookupName: String, pvaModel: PVAContainer) : T =
        lookupConcrete(lookupName, pvaModel,{"Lookup failed $lookupName"})

/**
 * Find the TemplateConnection associated with a TemplateDefinition, given a Reference from the PRM.
 */
fun findTemplateConnection(parentTemplate: TemplateDefinition, typeName : String, edgeLabel : String): InstantiationConnection {
    return parentTemplate.instantiations.find{ typeName == it.name }?.internalConnections?.find { edgeLabel == it.label }
            ?: throw RuntimeException("TemplateConnection not found: $typeName.$edgeLabel")
}