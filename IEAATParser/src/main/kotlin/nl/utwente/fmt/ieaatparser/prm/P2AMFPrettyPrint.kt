package nl.utwente.fmt.ieaatparser.prm

import org.codehaus.plexus.util.StringUtils
import pva.probcode.*

fun ProbabilisticExpression.prettyPrint(depth : Int = 0){
    val prefix = StringUtils.repeat("\t",depth)
    println("$prefix${this.eClass().name} {")
    when(this){
        is And -> {
            this.children[0].prettyPrint(depth+1)
            this.children[1].prettyPrint(depth+1)
        }
        is Or -> {
            this.children[0].prettyPrint(depth+1)
            this.children[1].prettyPrint(depth+1)
        }
        is Not -> {
            this.child.prettyPrint(depth+1)
        }
        is IfThenElse -> {
            println("$prefix Condition:")
            this.condition.prettyPrint(depth+1)
            println("$prefix True:")
            this.`true`.prettyPrint(depth+1)
            println("$prefix False:")
            this.`false`.prettyPrint(depth+1)
        }
        is Constant -> {
            println("$prefix ${this.value > 0.5}")
        }
        is ProbabilityReference -> {
            this.refersTo.prettyPrint(depth+1,prefix)
        }
        is ReferencingOperand -> {
            println(this.referenceChain.map { it.label }.joinToString(
                    prefix = prefix+" self -> ",
                    separator = " -> ",
                    postfix = " ->"
            ))
            when(this){
                is DefenceOperational -> { println("$prefix ${this.type.name}")}
                is AttackStepSucceeded -> { println("$prefix ${this.type.name}")}
                is ConnectionAvailable -> { println("$prefix ${this.type.name}")}
            }
        }
        else -> println("$prefix PrettyPrint not implemented")
    }
    println("$prefix}")
}

fun NamedDistribution.prettyPrint(depth : Int = 0, prefix : String){
    println("$prefix ${this.name}")
    this.definition.prettyPrint(depth+1)
}

fun ProbabilityDefinition.prettyPrint(depth: Int = 0){
    val prefix = StringUtils.repeat("\t",depth)
    println("$prefix${this.eClass().name} {")
    when(this){
        is LinearApproximation -> {
            this.approximationpoints.forEach {
                println("$prefix [${it.x},${it.y}]")
            }
        }
    }
    println("$prefix}")
}