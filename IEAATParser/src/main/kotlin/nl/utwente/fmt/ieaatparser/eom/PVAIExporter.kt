package nl.utwente.fmt.ieaatparser.eom

import nl.utwente.fmt.ieaatparser.io.IEaatParts
import nl.utwente.fmt.ieaatparser.prm.exportPVA
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import pva.PVAContainer
import pvai.PVAIContainer
import java.io.File

fun exportPVAI(parts: IEaatParts, exportedPRM: PVAContainer?, outFile: File, pvaOutFile: File? = null) {
    println("Generating pvai")
    val startTime = System.currentTimeMillis()

    val pva = exportedPRM ?: exportPVA(parts,pvaOutFile)
    println("Obtaining the PVA model took ${System.currentTimeMillis() - startTime}ms")

    outFile.delete()
    val pvai = EOMParser(pva,parts).parse()
    //Transform to analysis metamodel
    exportPVAItoXMI(pvai, outFile, pva)

    println("Transforming the EOM took ${System.currentTimeMillis() - startTime}ms")
}

/**
 * Exports the given model to the given file in the XMI format
 */
fun exportPVAItoXMI(model : PVAIContainer, location: File, pva : PVAContainer) {
    println("Attempting PVAI serialization")
    val outURI = URI.createFileURI(location.absolutePath)

    ResourceSetImpl().createResource(outURI).apply {
        this.contents += model
        println("Starting exporting...")
        pva.eResource().unload() //unload the PVA before exporting, so proxy references are created
        location.outputStream().use { oStream ->
            this.save(oStream, mapOf<Any, Any>())
        }
        println("Finished exporting")
    }.unload()
}

fun loadPVAIfromXMI(location: File): PVAIContainer {
    println("Starting reading .pvai file")
    val outURI = URI.createFileURI(location.absolutePath)
    val resourceSet = ResourceSetImpl()

    val resource =  resourceSet.getResource(outURI,true)

    //Fixes unresolved proxies by resolving them (somehow has to be done manually)
    EcoreUtil.UnresolvedProxyCrossReferencer.find(resource).forEach { unresolvedProxy ->
        unresolvedProxy.value.single().set(
                EcoreUtil.resolve(unresolvedProxy.key,resourceSet)
        )
    }

    val result = resource.contents.first() as PVAIContainer

    println("Finished reading .pvai file")
    return result
}