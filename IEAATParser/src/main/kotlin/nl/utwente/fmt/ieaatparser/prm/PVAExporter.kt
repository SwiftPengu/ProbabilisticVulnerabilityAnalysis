package nl.utwente.fmt.ieaatparser.prm

import nl.utwente.fmt.ieaatparser.io.IEaatParts
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import pva.PVAContainer
import java.io.File

fun exportPVA(parts: IEaatParts, outFile: File? = null, overwrite: Boolean = false): PVAContainer {
    println("Generating pva")
    val startTime = System.currentTimeMillis()

    if(!overwrite && outFile?.exists() ?: false){
        println("Existing PVA found")
        return importPVAfromXMI(outFile!!)
    }else {
        println("Reading the classmodel took ${System.currentTimeMillis() - startTime}ms")

        //Transform to analysis metamodel
        val parsedPRM = PRMTransformer(parts.classModel.classes).parse()

        //Null-safe access to outFile
        outFile?.let { outF ->
            outF.delete()
            exportPVAtoXMI(parsedPRM, outF)
        }

        println("Transforming the PRM took ${System.currentTimeMillis() - startTime}ms")
        return parsedPRM
    }
}

/**
 * Exports the given model to the given file in the XMI format
 */
fun exportPVAtoXMI(model : PVAContainer, location: File) {
    println("Exporting PVA to XMI")

    println("Starting export...")
    val rs = ResourceSetImpl()
    val outURI = URI.createFileURI(location.absolutePath)
    val res = rs.createResource(outURI).apply {
        this.contents += model
    }
    println("Saving...")
    location.outputStream().use { stream ->
        res.save(stream, mapOf<Any, Any>())
    }
    println("Finished exporting")
}

fun importPVAfromXMI(location : File): PVAContainer {
    println("Importing PVA...")
    val rs = ResourceSetImpl()
    val inURI = URI.createFileURI(location.absolutePath)
    val result = rs.getResource(inURI,true).contents.first() as PVAContainer
    println("Finished importing.")
    return result
}