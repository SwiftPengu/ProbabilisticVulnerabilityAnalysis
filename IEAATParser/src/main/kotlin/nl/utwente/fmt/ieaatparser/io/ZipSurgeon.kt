package nl.utwente.fmt.ieaatparser.io

import nl.utwente.fmt.ieaatparser.prm.readClassModel
import org.apache.commons.compress.archivers.zip.ZipFile
import java.io.File
import java.io.InputStream

/**
 * Reads an iEaat file, obtains the usable parts from it, and invokes the provided operation on the inputstreams on all parts.
 * Note the inline usage:
 *      someFile.dissectIEAAT { parts->
 *          ...
 *      }
 */
inline fun File.dissectIEAAT(operation: (IEaatParts) -> Unit){
    ZipFile(this).use { zipfile ->
        val entryList = zipfile.entries.toList()
        operation(IEaatParts(
                zipfile.getInputStream(
                        entryList.filter { it.name.endsWith(".eom", ignoreCase = true) }.single()
                ),
                zipfile.getInputStream(
                        entryList.filter { it.name.endsWith(".prm", ignoreCase = true) }.single()
                )
        ))
    }
}

data class IEaatParts(val eom : InputStream, val prm: InputStream){
    val classModel by lazy {
        readClassModel(prm)
    }
}