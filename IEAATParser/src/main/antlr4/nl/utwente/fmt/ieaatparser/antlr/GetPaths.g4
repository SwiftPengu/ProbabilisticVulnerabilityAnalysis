grammar GetPaths;

paths :
    (
        attackStepList
        |
        '(' attackStepList ')'
        |
        TARGET putInSet
    ) DASH 'visited' EOF
;

attackStepList:
    attackStepReference union*;

attackStepReference:
    reference castToAttackStep putInSet;

reference:
    'self'? '.' ID;

union:    '->' 'union' '(' attackStepReference ')';

castToAttackStep:
    '.' 'oclAsType' '(' 'AttackStep' ')';

putInSet:
    '->' 'asSet' '(' ')';

//Named tokens
//Only define those which are required to be referenced from the AST
TARGET: 'target';
DASH: '-';
AND : 'and';
OR : 'or';
NOT : 'not';
TRUE : 'true';
FALSE : 'false';
CHAR: 'a'..'z' | 'A'..'Z';
NUMBER: DIGIT+;
DIGIT: [0-9];
ID : CHAR (CHAR | NUMBER | '_')* ;
WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines
COMMENT : DASH DASH ~[\r\n]* -> skip;
