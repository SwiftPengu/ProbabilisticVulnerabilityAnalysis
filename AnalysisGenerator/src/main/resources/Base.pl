%
%
% Generic rules
%

% Instance derivation from templates
instance(attackStepType, ID, AttackStepType, TInstance) :-
    instance(assetType, ID, AssetType, TInstance),
    attackStepType(AttackStepType),
    attackedBy(AssetType, AttackStepType).

instance(defenceType, ID, DefenceType, TInstance) :-
    defenceType(DefenceType),
	templateDefinition(TemplateDefinition),
	templateInstance(TInstance, TemplateDefinition),
    defenceInstantiation(ID, DefenceType, TemplateDefinition).

instance(assetType, ID, AssetType, TInstance) :-
	assetType(AssetType),
    templateDefinition(TemplateDefinition),
	templateInstance(TInstance, TemplateDefinition),
    assetInstantiation(ID,AssetType,TemplateDefinition).

concreteConnectionInstance(Role,instance(SourceKind,Source,SourceVariety,TInstance),instance(TargetKind,Target,TargetVariety,TInstance)) :-
	instantiationConnection(Role, (SourceKind,Source), (TargetKind, Target), TemplateDef), % Find a connection
	templateInstance(TInstance,TemplateDef), % Find a template with the same template from the connection
	instance(SourceKind,Source,SourceVariety,TInstance), % Find two matching instances
	instance(TargetKind,Target,TargetVariety,TInstance).

% Auto-create bi-directional connections for attack steps
% TODO: replace with non-autogenerated code?
concreteConnectionInstance(Role,instance(attackStepType,SID,Variety,TI),instance(assetType,TID,TVariety,TI)) :-
	instance(attackStepType,SID,Variety,TI),
	concreteConnected(Role,Variety,TVariety),
	instance(assetType,TID,TVariety,TI).

concreteConnectionInstance(Role,instance(assetType,SID,SVariety,TI),instance(attackStepType,TID,TVariety,TI)) :-
	instance(assetType,SID,SVariety,TI),
	concreteConnected(Role,SVariety,TVariety),
	instance(attackStepType,TID,TVariety,TI).


%
%
% Virtual edge resolution
%
getAnyPath(instance(SKind,SID,SType,STinst), instance(TKind,TID,TType,TTinst), [(Final, TType)]) :-
	instance(SKind,SID,SType,STinst),
	instance(TKind,TID,TType,TTinst),
	connectionExists(Final, instance(SKind,SID,SType,STinst), instance(TKind,TID,TType,TTinst)).

getAnyPath(instance(SKind,SID,SType,STinst), instance(TKind,TID,TType,TTinst), [(Head, IType) | Path]) :-
	instance(SKind,SID,SType,STinst),
	instance(IKind,IID,IType,ITinst),
	instance(TKind,TID,TType,TTinst),
    connectionExists(Head, instance(SKind,SID,SType,STinst), instance(IKind,IID,IType,ITinst)),
    getAnyPath(instance(IKind,IID,IType,ITinst),instance(TKind,TID,TType,TTinst),Path).

virtualConnectionInstance(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)) :-
    instance(SKind,SID,SType,STinst),
    instance(TKind,TID,TType,TTinst),
	virtuallyConnected(Label,Stype,TType,Path),
	getAnyPath(instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst),Path).

reverseVirtualConnectionInstance(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)) :-
	instance(SKind,SID,SType,STinst),
	instance(TKind,TID,TType,TTinst),
	reverseVirtuallyConnected(Label,Stype,TType,Path),
	getAnyPath(instance(TKind,TID,TType,TTinst),instance(SKind,SID,SType,STinst),Path).

connectionExists(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)) :-
	virtualConnectionInstance(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)).
connectionExists(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)) :-
	reverseVirtualConnectionInstance(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)).
connectionExists(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)) :-
	concreteConnectionInstance(Label,instance(SKind,SID,SType,STinst),instance(TKind,TID,TType,TTinst)).

%
%
% ProbCode auxiliary rules
%
checkAttackStepSucceeded(instance(SourceKind,SourceID,SourceType,SourceTI),AttackStepType,Path) :-
    instance(assetType, AssetInstance, AssetType, TemplateInstance),
    instance(attackStepType, AssetInstance, AttackStepType, TemplateInstance),
    getAnyPath(instance(SourceKind,SourceID,SourceType,SourceTI), instance(attackStepType, AssetInstance, AttackStepType, TemplateInstance), Path),
    attackStepSucceeded(AssetInstance, AssetType, AttackStepType, TemplateInstance).

checkConnectionExists(instance(SourceKind,SourceID,SourceType,SourceTI),AssetType,Path) :-
    instance(assetType, AssetID, AssetType, AssetTI),
    instance(SourceKind,SourceID,SourceType,SourceTI),
    getAnyPath(instance(SourceKind,SourceID,SourceType,SourceTI), instance(assetType, AssetID, AssetType, AssetTI), Path).

checkDefenceWorking(instance(SourceKind,SourceID,SourceType,SourceTI),DefenceType,Path) :-
    instance(defenceType, DefenceID, DefenceType, DefenceTI),
    instance(SourceKind,SourceID,SourceType,SourceTI),
    getAnyPath(instance(SourceKind,SourceID,SourceType,SourceTI), instance(defenceType, DefenceID, DefenceType, DefenceTI), Path),
    defenceIsFunctioning(instance(defenceType, DefenceID, DefenceType, DefenceTI)).

somePathToAttackStep(attackStepType, AssetInstance, AttackStepType, TemplateInstance) :- entryPoint(AssetInstance, AttackStepType, TemplateInstance).
somePathToAttackStep(attackStepType, AssetInstance, AttackStepType, TemplateInstance) :-
	instance(attackStepType, AssetInstance, AttackStepType, TemplateInstance),
	instance(attackStepType, AssetInstance2, AttackStepType2, TemplateInstance2),
	attackPrerequisite(AttackStepType2,AttackStepType),
	somePathToAttackStep(attackStepType, AssetInstance2, AttackStepType2, TemplateInstance2).

attackStepSucceeded(AssetInstance, AssetType, AttackStepType, TemplateInstance) :-
    entryPoint(AssetInstance,AttackStepType,TemplateInstance),
    instance(assetType, AssetInstance, AssetType, TemplateInstance).

% True evidence (False evidence is in the rules)
attackStepSucceeded(AssetInstance, AssetType, AttackStepType, TemplateInstance) :-
    instance(assetType, AssetInstance, AssetType, TemplateInstance),
    hardEvidenceTrue(instance(assetType, AssetInstance, AssetType, TemplateInstance)).
defenceIsFunctioning(instance(defenceType, DefenceID, DefenceType, DefenceTI)) :-
    instance(defenceType, DefenceID, DefenceType, DefenceTI),
    hardEvidenceTrue(instance(defenceType, DefenceID, DefenceType, DefenceTI)).
% Evidence placeholders to satisfy the problog parser when no evidence is specified
hardEvidenceTrue(nobody).
hardEvidenceFalse(nobody).