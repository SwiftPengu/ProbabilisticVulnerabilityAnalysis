package nl.utwente

import org.apache.commons.cli.*
import java.nio.file.Files
import java.nio.file.Paths
import kotlin.system.measureTimeMillis

val tempdir = Files.createTempDirectory("pvatoproblog")
val pathToModels = Files.createDirectory(tempdir.resolve("models"))
val pathToTransformation = Paths.get("transformations").toAbsolutePath()
val pathToM2T = Paths.get("m2t").toAbsolutePath()

//TODO allow merging of files
fun main(args: Array<String>) {
    measureTimeMillis {
        val options = prepareOptions()
        try {
            val governor = parseCommandLine(args, options)
            governor.execute()
        }catch(e : ParseException){
            println("Illegal command line parameters: ${e.message}")
            HelpFormatter().printHelp("AnalysisGenerator", options,true)
        }
    }.let {
        println("Whole process took ${it}ms")
    }
}

private fun parseCommandLine(args: Array<String>, options: Options): Governor {
    val parsedArgs = DefaultParser().parse(options, args)
    val outFile = parsedArgs.getOptionValue("out") ?: throw ParseException("No output file provided")

    return Governor(parsedArgs, Paths.get(outFile))
}

private fun prepareOptions(): Options = Options().apply {
    addOption(Option.builder("pva")
            .desc("Whether to generate the PVA skeleton")
            .hasArg()
            .numberOfArgs(1)
            .argName("pvaSource")
            .optionalArg(false)
            .build()
    )
    addOption(Option.builder("pvai")
            .desc("Whether to generate the PVAI rules and queries")
            .hasArg()
            .numberOfArgs(1)
            .argName("pvaiSource")
            .optionalArg(false)
            .build()
    )
    addOption(Option.builder("o")
            .longOpt("out")
            .required()
            .desc("The name of the output file")
            .hasArg()
            .numberOfArgs(1)
            .argName("outputFile")
            .optionalArg(false)
            .build()
    )
    addOption(Option.builder("complete")
              .desc("Whether a complete ProbLog file should be generated")
              .build()
    )
}