package nl.utwente

import org.eclipse.epsilon.egl.EglTemplateFactory
import org.eclipse.epsilon.egl.EglTemplateFactoryModuleAdapter
import org.eclipse.epsilon.emc.emf.EmfModel
import java.io.File
import java.io.FileOutputStream
import java.nio.file.Path
import kotlin.system.measureTimeMillis

fun problog2text(problog: EmfModel, outputFile: Path) {
    val timing = measureTimeMillis {
        val problogOutFile = outputFile.toFile()
        //remove old file so we start fresh
        problogOutFile.delete()

        invokeProbLog2Text(problog, problogOutFile)
    }
    println("ProbLog to text took ${timing}ms")
}


fun invokeProbLog2Text(problog: EmfModel, out: File) {
    EglTemplateFactoryModuleAdapter(EglTemplateFactory()).apply {
        this.context.modelRepository.addModel(problog)
        parse(pathToM2T.resolve("ProbLog2PL.egl").toFile())

        //Execute the script, and save the output to a file
        FileOutputStream(out,true).buffered().use { problogStream ->

            problogStream.writer().use {
                it.write("% ********* Start of generated code\n")
                it.write(execute() as String)
            }
        }
    }

    //dispose the problog model
    problog.dispose()
}